#!/bin/sh

# This script records audio played by you computer as saves it in a folder
# specified by the OUTPUT variable.
# It is designed to work with Anki and any window manager. 
# Dependencies: xclip, arecord (ALSA), parec(Pulseaudio)
# Optionally, you may use ffmpeg, sox and a notification-daemon.

# The name of your file contains a timestamp.
# You may change the path or extension as you wish.
# 'arecord' works with .wav only
FORMAT='wav'
OUTPUT="/tmp/record_$(date +%F_%T).$FORMAT"
PID_FILE='/tmp/recordPID'
# Elapsed seconds to automatically stop recording.
MAX_RECORD_TIME=600
CURRENT_RECORD_TIME=0

# Your recording device.
# Consult the appropriate one by using the command 'aplay -l'(ALSA) or
# the file '$HOME/.asoundrc' (ALSA)
ALSA_RECORDING_DEVICE=looprec

# Get sources list by running 'pactl list short sources' and choose the 'output'
# one in order to record playback audio
PULSEAUDIO_RECORDING_DEVICE=alsa_output.pci-0000_00_14.2.analog-stereo.monitor
# May alse be written as the index number shown
#PULSEAUDIO_RECORDING_DEVICE=1

recordWithALSA () {
        if [ $FORMAT = 'wav' ]; then
            arecord -f cd -D "$ALSA_RECORDING_DEVICE" "$OUTPUT" &
            echo "$!" > $PID_FILE
        else
            ffmpeg -f alsa -i "$ALSA_RECORDING_DEVICE" "$OUTPUT" &
            echo "$!" > $PID_FILE
        fi
}

recordWithPulseaudio () {
        if isSupportedByPulseaudio $FORMAT ; then
            parec --file-format=$FORMAT -d "$PULSEAUDIO_RECORDING_DEVICE" "$OUTPUT" &
            echo "$!" > $PID_FILE
        else
            ffmpeg -f pulse -i "$PULSEAUDIO_RECORDING_DEVICE" "$OUTPUT" &
            echo "$!" > $PID_FILE
        fi
}

isSupportedByPulseaudio () {
        if [ $(parec --list-file-formats | cut -f1 | grep -co "$@" ) -gt 0 ]
        then return 0
        else return 1
        fi
}

# Program used for recording; 'ffmpeg' (works for both Alsa and Pulseaudio) or 
# 'arecord' (ALSA) or 'parec' (Pulseaudio)

# If it's already recording, finish recording.
if [ -f $PID_FILE ];then
        echo "Stopping recording audio."
        kill $(cat $PID_FILE) && rm $PID_FILE
        exit 0
else
        notify-send "Recording audio." &
        echo "Recording audio.\n"
        pulseaudio --check && recordWithPulseaudio || recordWithALSA
fi

while [ -f $PID_FILE -a $MAX_RECORD_TIME -gt $CURRENT_RECORD_TIME ];do
        CURRENT_RECORD_TIME=$(ps -o etimes= -p $(cat $PID_FILE) \
                | tr -dc [:digit:])
        sleep 1
done

if [ -f $PID_FILE ]; then
        echo "$MAX_RECORD_TIME seconds have elapsed since the start of the\
        recording. Finishing the recording process."

        notify-send "$MAX_RECORD_TIME seconds have elapsed since the start of the recording." "Finishing the recording process." &

        kill $(cat $PID_FILE) && rm $PID_FILE
fi

# Check if SOX is installed and remove silence at the beginning and end.
if [ $(which sox) -a -f "$OUTPUT" ];then
    echo "Removing silence at both ends."
    DESTPATH=$(dirname "$OUTPUT")
    TEMP_INPUT="$DESTPATH"/input."$FORMAT"
    mv "$OUTPUT" "$TEMP_INPUT"
    sox "$TEMP_INPUT" "$OUTPUT" silence 1 0.1 0.1% reverse silence 1 0.1 0.1% reverse
    rm "$TEMP_INPUT"
fi

# Send the audio file's path to your clipboard, so that you can paste with
# Ctrl+v in Anki.
echo "file://$OUTPUT" | xclip -i -selection clipboard -t "text/uri-list"
echo "Copied $OUTPUT to the clipboard."
notify-send "Copied $OUTPUT to the clipboard." &
exit 0
